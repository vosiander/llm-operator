name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/vosiander/llm-operator
  HELM_CHART_NAME: llm-operator

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  helm-push:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Helm Chart versions
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        echo "Original tag $GITHUB_REF_NAME, Version without v $VERSION"
        sed -i "s/^version:.*$/version: $VERSION/" helm/Chart.yaml
        sed -i "s/^appVersion:.*$/appVersion: \"$GITHUB_REF_NAME\"/" helm/Chart.yaml

    - name: Package and push Helm chart
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        helm package helm/
        helm push ${{ env.HELM_CHART_NAME }}-$VERSION.tgz oci://${{ env.REGISTRY }}/vosiander/charts

  notify-success:
    runs-on: ubuntu-latest
    needs: [build, helm-push]
    if: always() && (needs.build.result == 'success' && (needs.helm-push.result == 'success' || needs.helm-push.result == 'skipped'))
    
    steps:
    - name: Send success notification
      if: env.DISCORD_WEBHOOK_URL != ''
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        COMMIT_MSG=$(echo "${{ github.event.head_commit.message }}" | head -c 100)
        if [ ${#GITHUB_EVENT_HEAD_COMMIT_MESSAGE} -gt 100 ]; then
          COMMIT_MSG="$COMMIT_MSG..."
        fi
        
        curl -H "Content-Type: application/json" -d @- "$DISCORD_WEBHOOK_URL" << EOF
        {
          "embeds": [{
            "title": "✅ SUCCESS - ${{ github.event.repository.name }}",
            "description": "Pipeline completed successfully",
            "color": 3066993,
            "fields": [
              {
                "name": "Branch/Tag",
                "value": "${{ github.ref_name }}",
                "inline": true
              },
              {
                "name": "Commit",
                "value": "[\`${{ github.sha }}\`](${{ github.event.repository.html_url }}/commit/${{ github.sha }})",
                "inline": true
              },
              {
                "name": "Workflow",
                "value": "[#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "inline": true
              },
              {
                "name": "Commit Message",
                "value": "$COMMIT_MSG",
                "inline": false
              },
              {
                "name": "Author",
                "value": "${{ github.event.head_commit.author.name }}",
                "inline": true
              }
            ],
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF

  notify-failure:
    runs-on: ubuntu-latest
    needs: [build, helm-push]
    if: always() && (needs.build.result == 'failure' || needs.helm-push.result == 'failure')
    
    steps:
    - name: Send failure notification
      if: env.DISCORD_WEBHOOK_URL != ''
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        COMMIT_MSG=$(echo "${{ github.event.head_commit.message }}" | head -c 100)
        if [ ${#GITHUB_EVENT_HEAD_COMMIT_MESSAGE} -gt 100 ]; then
          COMMIT_MSG="$COMMIT_MSG..."
        fi
        
        curl -H "Content-Type: application/json" -d @- "$DISCORD_WEBHOOK_URL" << EOF
        {
          "embeds": [{
            "title": "❌ FAILED - ${{ github.event.repository.name }}",
            "description": "Pipeline failed",
            "color": 15158332,
            "fields": [
              {
                "name": "Branch/Tag",
                "value": "${{ github.ref_name }}",
                "inline": true
              },
              {
                "name": "Commit",
                "value": "[\`${{ github.sha }}\`](${{ github.event.repository.html_url }}/commit/${{ github.sha }})",
                "inline": true
              },
              {
                "name": "Workflow",
                "value": "[#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "inline": true
              },
              {
                "name": "Commit Message",
                "value": "$COMMIT_MSG",
                "inline": false
              },
              {
                "name": "Author",
                "value": "${{ github.event.head_commit.author.name }}",
                "inline": true
              }
            ],
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF
